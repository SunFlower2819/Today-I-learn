
  C++은 구조적으로 예외를 처리할 수 있는 메커니즘을 제공한다.
  이 메커니즘을 이용하면, 코드의 가독성과 유지보수성을 높일 수 있다.
  예외의 처리를 프로그램의 일반적인 흐름에서 독립시키는 것이 가능하기 때문이다.
  
-------------------------------------------------------------------------------------
    
🟢 C++의 예외처리 메커니즘 이해: try와 catch 그리고 throw의 이해

 * try   : 예외를 발견한다.
 * catch : 예외를 잡는다.
 * throw : 예외를 던진다.
   
   
   🟠 try 블록 
    
   try 블록은 예외발생에 대한 검사의 범위를 지정할 때 사용된다. 즉, try 블록 내에서 예외가 발생하면,
   이는 C++의 예외처리 메커니즘에 의해서 처리가 된다.
     
   try
   {
      // 예외발생 예상지역
   }


   🟠 catch 블록
   
   catch 블록은 try 블록에서 발생한 예외를 처리하는 코드가 담기는 영역으로써,
   그 형태가 마치 반환형 없는 함수와 유사하다.
     
   catch(처리할 예외의 종류 명시)
   {
      // 예외처리 코드의 삽입
   }


   🟠 try 블록과 catch 블록
   
   catch 블록은 try 블록의 뒤에 이어서 등장하며, try 블록에서 발생한 예외는 이곳 catch 블록에서 처리가 된다.
     
   try
   {
      // 예외발생 예상지역
   }
   catch(처리할 예외의 종류 명시)
   {
      // 예외처리 코드의 삽입
   }

       🎈🎈 사실 이렇게 try와 catch는 하나의 문장이다. 따라서 항상 이어서 등장해야 하며, 중간에 다른 문장이 오면 안 된다.
         
          "try 블록 내에서 발생하는 예외는 이어서 등장하는 catch 블록에 의해 처리된다."
         
         
   🟠 throw
     
    키워드 throw는 예외가 발생했음을 알리는 문장의 구성에 사용된다.
         
    throw expn;

    위의 문장에서 expn은 변수, 상수 그리고 객체 등 표현 가능한 모든 데이터가 될 수 있으나,
    예외상황에 대한 정보를 담은, 의미 있는 데이터이어야 한다.
    expn의 위치에 오는 데이터를 가리켜 그냥 '예외'라고 표현하기도 한다.

    throw expn;  이 문장이 실행되면 C++의 예외처리 메커니즘이 동작하여, 일반적인 프로그램의 흐름과는 다른
    예외처리의 흐름이  시작된다. 
      
     "throw에 의해 던져진 '예외 데이터'는, '예외 데이터'를 감싸는 try 블록에 의하여 감지가 되어 이어서 등장하는 catch 블록에 의해 처리된다."
      
   try
   {
      if(예외가 발생한다면)
        throw expn;
   }
   catch(type exn)
   {
      // 예외처리
   }

-------------------------------------------------------------------------------------
  
#include <iostream>
using namespace std;

int main()
{
	int num1, num2;
	cout << "두 개의 숫자 입력: ";
	cin >> num1 >> num2;

	try                    
	{
		if (num2 == 0)           //🎈🎈 만약 num2가 0이라면 try문에서 바로 catch문으로 넘어간다.
		{
			throw num2;
		}

		cout << "두 수의 나눗셈: " << num1 / num2 << endl;
	}
	catch (int expn)                   //🎈🎈 expn에는 num2를 전달 받는다.
	{
		cout << expn << "으로는 나눌 수 없습니다." << endl;
	}

	return 0;
}         
                ✅ throw절에 의해 던져진 예외 데이터의 자료형과 catch 블록의 매개변수 자료형은 일치해야 한다.
                   만약에 일치하지 않으면, 던져진 예외 데이터는 catch 블록으로 전달되지 않는다.
                     
                     
         - try 블록을 만나면 그 안에 삽입된 문장이 순서대로 실행된다.
         - try 블록 내에서 예외가 발생하지 않으면 catch 블록 이후를 실행한다.
         - try 블록 내에서 예외가 발생하면, 예외가 발생한 지점 이후의 나머지 try 영역은 건너뛴다.
           
           
          "try 블록 내에서 예외가 발생하면, 예외가 발생한 지점 이후의 나머지 try 영역은 건너뛴다."
          이렇게 되는 이유는 try 블록 내에서 그냥 작업을 하면 된다는 의미를 가진다.
            
            
            
