🟢 new 연산자에 의해서 발생하는 예외

--> 아래 코드는 프로그래머가 정의하지 않아도 발생하는 예외가 있다는 것을 보여준다.

#include <iostream>
#include <new>
using namespace std;

int main()
{
	int num = 0;

	try
	{
		while (1)
		{
			num++;
			cout << num << "번째 할당 시도" << endl;
			new int[10000][10000];   
		}
	}
	catch (bad_alloc& bad)  //🎈🎈 bad_alloc은 <new>에 선언된 예외 클래스로써 메모리 공간의 할당이 실패했음을 알리는 의도로 정의되었다.
	{
		cout << bad.what() << endl;  //🎈🎈 what()은 예외의 원인정보를 문자열 형태로 반환한다.
		cout << "더 이상 할당 불가!" << endl;
	}
	return 0;
}


/*
실행결과 :    1번째 할당 시도
              2번째 할당 시도
              3번째 할당 시도
              4번째 할당 시도
              5번째 할당 시도
              6번째 할당 시도
              7번째 할당 시도
              8번째 할당 시도
              9번째 할당 시도
              10번째 할당 시도
              11번째 할당 시도
              12번째 할당 시도
              13번째 할당 시도
              14번째 할당 시도
              15번째 할당 시도
              16번째 할당 시도
              17번째 할당 시도
              18번째 할당 시도
              19번째 할당 시도
              20번째 할당 시도
              21번째 할당 시도
              22번째 할당 시도
              23번째 할당 시도
              24번째 할당 시도
              25번째 할당 시도
              26번째 할당 시도
              27번째 할당 시도
              28번째 할당 시도
              29번째 할당 시도
              30번째 할당 시도
              31번째 할당 시도
              32번째 할당 시도
              33번째 할당 시도
              34번째 할당 시도
              35번째 할당 시도
              36번째 할당 시도
              37번째 할당 시도
              38번째 할당 시도
              39번째 할당 시도
              40번째 할당 시도
              41번째 할당 시도
              42번째 할당 시도
              43번째 할당 시도
              44번째 할당 시도
              45번째 할당 시도
              46번째 할당 시도
              47번째 할당 시도
              48번째 할당 시도
              49번째 할당 시도
              50번째 할당 시도
              51번째 할당 시도
              52번째 할당 시도
              53번째 할당 시도
              54번째 할당 시도
              55번째 할당 시도
              56번째 할당 시도
              57번째 할당 시도
              58번째 할당 시도
              59번째 할당 시도
              60번째 할당 시도
              61번째 할당 시도
              62번째 할당 시도
              63번째 할당 시도
              64번째 할당 시도
              bad allocation
              더 이상 할당 불가!
*/

------------------------------------------------------------------------

🟢 모든 예외를 처리하는 catch 블록

	try
	{
	  //...
	}
	catch (...)     //🎈🎈... 은 전달되는 모든 예외를 다 받아주겠다는 선언이다.
	{
		//...
	}
  
------------------------------------------------------------------------

🟢 예외 던지기

--> 예외처리는 가급적 간결한 구조를 띠는게 좋다.
    따라서 정말로 필요한 상황이 아니라면, 굳이 예외를 다시 던지기 위해서 노력할 필요는 없다.

#include <iostream>
#include <new>
using namespace std;

void Divide(int num1, int num2)
{
	try
	{
		if (num2 == 0)
			throw 5;
		cout << "몫: " << num1 / num2 << endl;
		cout << "나머지: " << num1 % num2 << endl;
	}
	catch (int expn)
	{
		cout << "first catch" << endl;
		cout << expn << endl;
		throw;                   //🎈🎈 예외를 다시 던진다! 
	}
}

int main()
{
	try
	{
		Divide(9, 2);
		Divide(4, 0);
	}
	catch (int expn)                   //🎈🎈 여기까지 expn에 처음의 throw 한 예외데이터가 전달된다.
	{
		cout << "second catch" << endl;
		cout << expn << endl;
	}
	return 0;
}


/*
출력결과:   몫: 4
            나머지: 1
            first catch
            5
            second catch
            5
*/

