#include <iostream>
using namespace std;

int main()
{
	int num1, num2;
	cout << "두 개의 숫자 입력: ";
	cin >> num1 >> num2;
	cout << "두 수의 나눗셈: " << num1 / num2 << endl;

	return 0;
}

                  만약 위의 코드에서 num2에 0을 입력하면 코드가 제대로 작동하지 않고 종료가 된다.
                    
                  따라서 아래와 같이 num1을 0으로 나누지 못하도록 if문을 활용하여 예외처리를 해보겠다.
                    
                    
#include <iostream>
using namespace std;

int main()
{
	int num1, num2;
	cout << "두 개의 숫자 입력: ";
	cin >> num1 >> num2;                                //🎈🎈 예외 발생위치

	if (num2 == 0)                                      //🎈🎈 예외 발견위치
	{
		cout << "0으로는 나눌 수 없습니다." << endl;       //🎈🎈 예외 처리위치
	}
	else
	{
		cout << "두 수의 나눗셈: " << num1 / num2 << endl;
	}

	return 0;
}

              '예외가 발견되는 위치'는 '예외가 발생하는 위치'와 다를 수 있다. 위 코드의 경우 if문 안에서 0이 입력 될 수 없음을
              알리고 프로그램의 재실행을 요구하는 방식으로 예외를 처리하고 있는데, 우리에게 익숙한 이렇나 예외처리방식은
              다음의 단점을 지닌다.
                
              "예외처리를 위한 코드와 프로그램의 흐름을 구성하는 코드를 쉽게 구분하지 못합니다."
                
              이를 if문과 주석으로 구분한다고 생각할 수도 있겠지만, if문과 주석은 예외처리를 알리기 위해서만 사용되는 기능이 아니다.
              결국 우리는 이러한 이유로 C++의 예외처리 메커니즘을 이용할 수 있겠다.



           
